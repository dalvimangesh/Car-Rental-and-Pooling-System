
create or replace function check_no_overlap(userid int,start_date timestamp without time zone,end_date timestamp without time zone)
returns boolean 
  AS $res$
  declare 
  res boolean;
 begin
 	perform * from booking where user_id = userid and cancelled_status = 'Booked' and end_time >= now() and
	(start_date > end_time or end_date < start_time);
	res =  found;
	return res;
end;
 $res$ LANGUAGE plpgsql;

/*-------------------------------------------------------------------------------------------------------------------------------------------*/

/* Number of people who are pooling a car - same as number of pooling_id for a booking_id*/
/* Add 1 if finding total capacity of the car */
create or replace function get_count_bookingid(bookingid int)
returns integer as
$cnt$
declare cnt integer;
begin
	if exists (select * from pooling where pooling.booking_id = bookingid and pooling.cancelled_status = 'No') then 
	cnt = (select count(pooling.booking_id) from pooling where pooling.cancelled_status = 'No' and
	pooling.booking_id = bookingid
	group by pooling.booking_id ); 
	else cnt =  0; 
	end if ;
	return cnt;
end;
$cnt$ LANGUAGE plpgsql;

/* --------------------------------------------------------------------------------------------------------------------------------*/
create or replace function get_car_rating(reg_no varchar(50))
returns numeric as 
$car_rating$
declare car_rating numeric;
begin
	if exists (select * from rating where registration_no = reg_no) then
		car_rating = (select avg(rating_given) from rating group by registration_no);
	else car_rating = 0;
	end if;
	return car_rating;
end;
$car_rating$ language plpgsql;
